package main

import (
	tb "gopkg.in/tucnak/telebot.v2"
	"log"
	ss "scheduleBot/service"
	"time"
)

func main(){
	groups := ss.CreateGroups()
	grps := ss.Npm // –ø—Ä–æ—Å—Ç–æ –º–∞—Å—Å–∏–≤ —Å—Ç—Ä–æ–∫ –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏–π –≥—Ä—É–ø–ø

	// –¥–∞–Ω–Ω—ã–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é-----------------------------------
	UserGroup := "–º–ø–º121" // —Ç—É—Ç —Ö—Ä–∞–Ω–∏—Ç—Å—è –≥—Ä—É–ø–ø–∞ –¥–ª—è —é–∑–µ—Ä–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –º–ø–º121)
	days := ss.CreateDaysImplement(groups["–º–ø–º121"]) // –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –Ω–µ–¥–µ–ª—è –¥–ª—è –≥—Ä—É–ø–ø—ã –º–ø–º121

	// -------------------------
	b, err := tb.NewBot(tb.Settings{
		Token: ss.Token,
		Poller: &tb.LongPoller{Timeout: 10*time.Second},
	})
	if err != nil{
		log.Fatal(err)
	}

	// –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–≤–æ–¥–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è---------------------------
	r2 := &tb.ReplyMarkup{ResizeReplyKeyboard: true}
	btnNow := r2.Text("–°–ï–ô–ß–ê–°‚ùóÔ∏è")
	btnDay := r2.Text("–î–ï–ù–¨‚åõÔ∏è")
	r2.Reply(
		r2.Row(btnNow),
		r2.Row(btnDay),
	)
	// –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–Ω—è----------------------------------
	r3 := &tb.ReplyMarkup{ResizeReplyKeyboard: true}
	weekDays := map[string]int{"–ü–ù–î" : 0, "–í–¢–†" : 1, "–°–†–î" : 2, "–ß–¢–í" : 3, "–ü–¢–ù" : 4, "–°–£–ë" : 5}
	btnWeekDays := make([]tb.Btn, len(weekDays))
	for name, num := range weekDays{
		btnWeekDays[num] = r3.Text(name)
	}
	r3.Reply(
		r3.Row(btnWeekDays...),
	)
	// –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –≥—Ä—É–ø–ø–ø—ã------------------------------
	r1 := &tb.ReplyMarkup{}
	btnGroups := make([]tb.Btn, len(grps))
	for i, v := range grps{
		btnGroups[i] = r1.Text(v)
	}
	r1.Reply(
		r1.Row(btnGroups...),
	)



	// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö---------------------------------------
	b.Handle("/edit", func (m *tb.Message){
		b.Send(m.Sender, "–ö–∞–∫–∞—è –≥—Ä—É–ø–ø–∞?", r1)
	})
	for _, someBtn := range btnGroups {
		b.Handle(&someBtn, func(m *tb.Message) {
			UserGroup = m.Text
			days = ss.CreateDaysImplement(groups[UserGroup])
			b.Send(m.Sender, "–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã "+UserGroup, r2)
		})
	}
	// –í—ã–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö---------------------------------------------
	b.Handle(&btnNow, func (m *tb.Message){
		idx := int(time.Now().Weekday()) - 1
		if idx == -1{ // –µ—Å–ª–∏ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ
			b.Send(m.Sender, "ü¶ç—á–∏–ªü¶ç", r2)
			return
		}
		curday := days[idx]
		b.Send(m.Sender, curday.PrettyDayWithTimer(), r2)
	})
	b.Handle(&btnDay, func (m *tb.Message){
		b.Send(m.Sender, "–í—ã–±–µ—Ä–µ—Ç–µ –¥–µ–Ω—å", r3)
	})
	for _, someBtn := range btnWeekDays{
		b.Handle(&someBtn, func(m *tb.Message){
			curday := days[weekDays[m.Text]]
			b.Send(m.Sender, curday.PrettyDay(), r2)
		})
	}
	b.Start()
}